import os
import ctypes
from collections import deque
from typing import Iterable
from sys import argv
from dotenv import load_dotenv
from locale import getdefaultlocale

# files with keys
AES_KF = '.aes_key.bin'
AES_KF_E = AES_KF + '.enc'
PUB_KF = '.pub_key.bin'
PRIV_KF = '.priv_key.bin'


def all_files(full_path_folder: str) -> Iterable:
    '''Returns a list(deque) with all the files in
    the given folder.'''
    list_of_all_files = deque()
    try:

        for root, __, files in os.walk(full_path_folder):
            for file in files:
                list_of_all_files.append(os.path.join(root, file))

        return list_of_all_files

    except FileNotFoundError:
        print(f"The folder '{full_path_folder}' does not exist.")
    except PermissionError:
        print(f"Without permission to access '{full_path_folder}'.")

    return list_of_all_files


def delete_file(file_name: str) -> None:
    try:
        os.remove(file_name)
    except OSError as e:
        print(e)


def print_iterable(it: Iterable) -> None:
    for element in it:
        print(element)


def get_venv_var(venv_var: str) -> str | None:
    if len(argv) < 2:
        return None
    if argv[1] != 'test':
        return None
    load_dotenv()
    return os.getenv(venv_var)


def write_bytes(bytes_: bytes, file_name: str) -> None:
    with open(file_name, 'wb') as file_out:
        file_out.write(bytes_)


def read_bytes(file_name: str) -> bytes:
    data = None
    with open(file_name, 'rb') as f:
        data = f.read()
    return data


def target_folder() -> str:
    abs_route_target = ''
    if os.name == 'nt':      # windows system
        abs_route_target = os.path.expanduser('~\\Documents')
        assert os.path.exists(abs_route_target)
        return abs_route_target
    assert os.name == 'posix'
    language = getdefaultlocale()[0][:2]
    if language == 'en':
        abs_route_target = os.path.expanduser('~/Documents')
        assert os.path.exists(abs_route_target)
    if language == 'es':
        abs_route_target = os.path.expanduser('~/Documentos')
        assert os.path.exists(abs_route_target)
    return abs_route_target


ABS_ROUTE_TARGET_FOLDER = target_folder()


def change_background(img_file: str) -> None:
    abs_path = os.path.abspath(os.getcwd()) + '/' + img_file
    assert os.path.exists(abs_path)
    if os.name == 'nt':     # windows system
        import ctypes
        ctypes.windll.user32.SystemParametersInfoW(20, 0, abs_path, 0)
        return
    assert os.name == 'posix'
    if os.popen('echo $XDG_CURRENT_DESKTOP').read()[7:-1] == 'GNOME':
        cmd = '/usr/bin/gsettings set org.gnome.desktop.background picture-uri '
        os.system(cmd + img_file)


def reveal_file(file_name: str) -> None:
    '''Only for files in the same folder.'''
    assert file_name[0] == '.', '\'' + file_name + '\' wasn\'t hidden.'
    try:
        os.rename(file_name, file_name[1:])
    except Exception as e:
        print(e)
    if os.name == 'nt':     # widows system
        try:
            ret = ctypes.windll.kernel32.SetFileAttributesW(file_name, 0x80)
            if not ret:
                raise ctypes.WinError()
        except OSError as e:
            print(e)

def hide_file(file_name: str) -> None:
    if file_name[0] != '.':
        try:
            os.rename(file_name, '.' + file_name)
        except Exception as e:
            print(e)
    if os.name == 'nt':     # windows system
        try:
            ret = ctypes.windll.kernel32.SetFileAttributesW(file_name, 0x02)
            if not ret:
                raise ctypes.WinError()
        except OSError as e:
            print(e)
