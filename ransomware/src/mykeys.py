import os
from secrets import choice
from Crypto.Protocol.KDF import PBKDF2
from Crypto.Random import get_random_bytes
from Crypto.PublicKey import RSA
from string import ascii_letters, digits


CHARS = ascii_letters + digits + '+-!@#$%^&*()_[]{};:,.<>?|'


def get_AES_random_key() -> bytes:
    r_passphrase = ''.join(choice(CHARS) for _ in range(64))
    salt = get_random_bytes(32)
    return PBKDF2(r_passphrase, salt, dkLen=64, count=100000)


def get_RSA_random_key() -> tuple:
    key = RSA.generate(4096)
    pub_key = key.public_key().export_key()
    priv_key = key.export_key(pkcs=8)
    return (pub_key, priv_key)


def write_RSA_key(pub_key: bytes, priv_key: bytes) -> None:

    with open('pub_key.bin', 'wb') as pub_key_file_out:
        pub_key_file_out.write(pub_key)

    with open('priv_key.bin', 'wb') as priv_key_file_out:
        priv_key_file_out.write(priv_key)


if __name__ == '__main__':
     keys = os.path.isfile('pub_key.bin') and os.path.isfile('priv_key.bin')
     if not keys:
        (pub_key, priv_key) = get_RSA_random_key()
        write_RSA_key(pub_key, priv_key)
        print('keys created successfully')
     else:
        print('keys already craeted')
