from os.path import isfile
from secrets import choice
from Crypto.Protocol.KDF import PBKDF2
from Crypto.Random import get_random_bytes
from Crypto.PublicKey import RSA
from string import ascii_letters, digits
from tools import read_bytes, write_bytes, PUB_KF, PRIV_KF, AES_KF


CHARS = ascii_letters + digits + '+-!@#$%^&*()_[]{};:,.<>?|'


def get_AES_random_key() -> bytes:
    r_passphrase = ''.join(choice(CHARS) for _ in range(64))
    salt = get_random_bytes(32)
    return PBKDF2(r_passphrase, salt, dkLen=32, count=100000)


def get_RSA_random_key() -> tuple:
    key = RSA.generate(4096)
    pub_key = key.public_key().export_key()
    priv_key = key.export_key(pkcs=8)
    return (pub_key, priv_key)


bytes_to_RSA_key = lambda bytes_ : RSA.import_key(bytes_)


if __name__ == '__main__':
    keys = isfile(PUB_KF) and isfile(PRIV_KF)
    if not keys:
       print('creating keys...')
       (pub_key, priv_key) = get_RSA_random_key()
       write_bytes(pub_key, PUB_KF)
       write_bytes(priv_key, PRIV_KF)
       print('keys created successfully')
    else:
       print('keys already craeted')
       pub_key_bytes = read_bytes(PUB_KF)
       print(bytes_to_RSA_key(pub_key_bytes).export_key())
